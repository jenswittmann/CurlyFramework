.clear {
	clear: both;
}

.hide-text {
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
}

.show-text {
	overflow: inherit;
	text-indent: 0;
	white-space: inherit;
}

* {
	image-rendering: optimizeQuality;
	-ms-interpolation-mode: bicubic;
}

// Vertical Align
@mixin vertical-align {
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// Fallback for rem
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin remfb($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// Wraps interior content in a media query
@mixin breakpoint($querystring) {
  $valid: true;
  @if type-of($querystring) != "string" {
    @warn "querystring: #{$querystring} is not a string";
    $valid: false;
  }
  @if $valid == true {
    @media #{$querystring} {
      @content;
    }
  }
}