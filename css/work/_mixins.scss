.clear {
	clear: both;
}

.debug {
	* {
		outline: 1px dotted blue;
	}
}

.table-cell {
	vertical-align: top;
}

img {
	display: block;
	width: 100%;
	height: auto;
	border: 0;
	outline: 0;
}

.hide {
	display: none;
}

.hide-text {
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
}

.show-text {
	overflow: inherit;
	text-indent: 0;
	white-space: inherit;
}

.text-right {
	text-align: right;
}

* {
	image-rendering: optimizeQuality;
	-ms-interpolation-mode: bicubic;
}

blockquote, adress {
	font-style: normal;
}

// ###Mixins

// Vertical Align
@mixin vertical-align {
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

// Fallback for rem
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin remfb($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// rounded Corners
$default_rounded_amount: 5px;
@mixin round-corners($amount: $default_rounded_amount) {
  border-radius: $amount;
  -moz-border-radius: $amount;
  -webkit-border-radius: $amount;
}

// Sets container styles
@mixin container {
  $valid: true;
  @if type-of($grid-max-width) != "number" {
    @warn "grid-max-width: #{$grid-max-width} is not a number";
    $valid: false;
  }
  @if type-of($rem-base) != "number" {
    @warn "rem-base: #{$rem-base} is not a number";
    $valid: false;
  }
  @if $valid == true {
    width: 100%;
    max-width: $grid-max-width;
    @include clear;
  }
}

// Sets col container styles
@mixin col-container {
  $valid: true;
  @if type-of($grid-max-width) != "number" {
    @warn "grid-max-width: #{$grid-max-width} is not a number";
    $valid: false;
  }
  @if type-of($rem-base) != "number" {
    @warn "rem-base: #{$rem-base} is not a number";
    $valid: false;
  }
  @if $valid == true {
    width: 100%;
    text-align: justify !important;
    text-justify: distribute-all-lines;
    font-size: 0 !important;
    max-width: $grid-max-width;
    & > * {
      text-align: left;
      font-size: rem-calc($rem-base);
    }
    &:after {
      content: '';
      display: inline-block;
      width: 100%;
    }
  }
}

// Sets grid column width
@mixin span($cols: 4, $padding: true) {
  $valid: true;
  @if type-of($cols) != "number" {
    @warn "cols: #{$cols} is not a number";
    $valid: false;
  }
  @if type-of($padding) != "bool" {
    @warn "padding: #{$padding} is not a boolean";
    $valid: false;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if type-of($grid-padding) != "number" {
    @warn "grid-padding: #{$grid-padding} is not a number";
    $valid: false;
  }
  @if $valid == true {
    $column-width: $cols / $grid-columns;
    @if $padding != false {
    padding-left: $grid-padding;
    padding-right: $grid-padding;
    }
    width: percentage($column-width);
    float: left;
  }
}

// Sets grid column width (with gutter)
@mixin col($span: 4) {
  $valid: true;
  @if type-of($span) != "number" {
    @warn "span: #{$span} is not a number";
    $valid: false;
  }
  @if type-of($grid-max-width) != "number" {
    @warn "grid-max-width: #{$grid-max-width} is not a number";
    $valid: false;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if type-of($grid-gutter) != "number" {
    @warn "grid-gutter: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if $valid == true {
    $column-width: 100% / $grid-columns;
    $gutter: ($grid-gutter * 0.75) / $grid-max-width * 100;
    $span-width: $span * $column-width;
    width: $span-width - $gutter;
    vertical-align: top;
    display: inline-block;
  }
}

// Sets grid offet margin
@mixin offset($cols: 4) {
  $valid: true;
  @if type-of($cols) != "number" {
    @warn "cols: #{$cols} is not a number";
    $valid: false;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if $valid == true {
    margin-left: percentage($cols/$grid-columns);
  }
}

// Wraps interior content in a media query
@mixin breakpoint($querystring) {
  $valid: true;
  @if type-of($querystring) != "string" {
    @warn "querystring: #{$querystring} is not a string";
    $valid: false;
  }
  @if $valid == true {
    @media #{$querystring} {
      @content;
    }
  }
}

// Renders fully prefixed transistion
@mixin transition ($property: 0.15s) {
  $valid: false;
  @if type-of($property) == "string" {
    $valid: true;
  }
  @if type-of($property) == "list" {
    $valid: true;
  }
  @if type-of($property) == "number" {
    $valid: true;
  }
  @if $valid == true {
    @include prefixer(transition, $property, webkit moz ms);
  } @else {
    @warn "property: #{$property} is not a valid argument";
  }
}

// Renders fully prefixed transform
@mixin transform($property: none) {
  $valid: false;
  @if type-of($property) == "string" {
    $valid: true;
  }
  @if type-of($property) == "list" {
    $valid: true;
  }
  @if $valid == true {
    @include prefixer(transform, $property, webkit moz ms);
  } @else {
    @warn "property: #{$property} is not a valid argument";
  }
}

// Renders fully prefixed box-sizing
@mixin box-sizing ($box: border-box) {
  $valid: true;
  @if type-of($box) != "string" {
    @warn "box: #{$box} is not a string";
    $valid: false;
  }
  @if $valid == true {
    @include prefixer(box-sizing, $box, webkit moz);
  }
}

// Utility for prefixing mixins
@mixin prefixer($property, $value, $prefixes: webkit moz) {
  $valid: false;
  @if type-of($property) == "string" {
    $valid: true;
  }
  @if type-of($prefixes) == "list" {
    $valid: true;
  }
  @if type-of($prefixes) == "string" {
    $valid: true;
  }
  @if $valid == true {
    @each $prefix in $prefixes {
      #{"-" + $prefix + "-" + $property}: $value;
    }
    #{$property}: $value;
  } @else {
    @warn "Invalid arguments supplied";
  }
}

// Sets ellipsis overflow
@mixin ellipsis($width: 100%) {
  $valid: true;
  @if type-of($width) != "number" {
    @warn "width: #{$width} is not a number";
    $valid: false;
  }
  @if $valid == true {
    display: inline-block;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
}

// Clearfix include
@mixin clear($extend: true) {
  $valid: true;
  @if type-of($extend) != "bool" {
    @warn "extend: #{$extend} is not a boolean";
    $valid: false;
  }
  @if $valid == true {
    @if $extend {
      @extend %clear;
    }
    @else {
      #{'&'}:after {
      content:"";
      display:table;
      clear:both;
      }
    }
  }
}

// Placeholder for clear
%clear:after {
  content:"";
  display:table;
  clear:both;
}

// Text hider

@mixin hide-text($extend: true) {
  $valid: true;
  @if type-of($extend) != "bool" {
    @warn "extend: #{$extend} is not a boolean";
    $valid: false;
  }
  @if $valid == true {
    @if $extend {
      @extend %hide-text;
    }
    @else {
    overflow:hidden;
    text-indent: 120%;
    white-space: nowrap;
    }
  }
}

// Placeholder for hide-text
%hide-text {
  overflow:hidden;
  text-indent: 120%;
  white-space: nowrap;
}

// Inline List

@mixin inline-list($float: true) {
  $valid: true;
  @if type-of($float) != "bool" {
    @warn "float: #{$float} is not a boolean";
    $valid: false;
  }
  @if $valid == true {
    list-style-type:none;
    padding:0;
    margin:0;
    overflow:hidden;
    > li{
        @if $float == true {
        display:block;
        float:left;
      } @else {
        display: inline-block;
      }
    }
  }
}